name: AI Code Analysis
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          npm i -g pnpm@9
          pnpm install
          pip install g4f

      - name: Perplexity API Analysis
        id: perplexity
        env:
          PPLX_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
        run: |
          echo "# Perplexity Analysis" > perplexity-output.md
          
          # Gather code files to analyze
          FILES=$(find pulumi -name '*.ts' -o -name '*.yml' 2>/dev/null | head -20)
          CODE_SAMPLE=""
          for file in $FILES; do
            if [ -f "$file" ]; then
              CODE_SAMPLE="${CODE_SAMPLE}\n\n=== $file ===\n$(head -50 "$file")"
            fi
          done
          
          # Call Perplexity API
          RESPONSE=$(curl -s -X POST "https://api.perplexity.ai/chat/completions" \
            -H "Authorization: Bearer ${PPLX_API_KEY}" \
            -H "Content-Type: application/json" \
            -d "{
              \"model\": \"llama-3.1-sonar-small-128k-online\",
              \"messages\": [
                {
                  \"role\": \"system\",
                  \"content\": \"You are a senior DevOps engineer reviewing infrastructure code. Provide actionable recommendations for security, performance, and best practices.\"
                },
                {
                  \"role\": \"user\",
                  \"content\": \"Review this homelab infrastructure code and provide security, CI/CD, and architecture improvements:\n${CODE_SAMPLE}\"
                }
              ],
              \"max_tokens\": 2000,
              \"temperature\": 0.2
            }" 2>&1)
          
          if [ $? -eq 0 ] && echo "$RESPONSE" | grep -q '"choices"'; then
            echo "$RESPONSE" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('choices', [{}])[0].get('message', {}).get('content', 'No content'))" >> perplexity-output.md
            echo "✓ Perplexity analysis completed" >> perplexity-output.md
          else
            echo "⚠️ Perplexity API call failed" >> perplexity-output.md
            echo "Response: $RESPONSE" >> perplexity-output.md
          fi

      - name: Amazon Q Developer Analysis
        id: amazonq
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "# Amazon Q Developer Analysis" > amazonq-output.md
          
          # Check if AWS CLI is available
          if command -v aws &> /dev/null; then
            echo "AWS CLI found, checking for Q Developer CLI..." >> amazonq-output.md
            
            # Try to install Q Developer CLI
            if ! command -v q &> /dev/null; then
              echo "Installing AWS Q Developer CLI..." >> amazonq-output.md
              curl -sSL https://d10jzf4tqg8kd4.cloudfront.net/aws-q-developer-cli/latest/install.sh | bash || true
              export PATH="$HOME/.local/bin:$PATH"
            fi
            
            # Attempt to use Q Developer
            if command -v q &> /dev/null; then
              q review --format json --output q-review.json || echo "Q review command failed" >> amazonq-output.md
              if [ -f q-review.json ]; then
                cat q-review.json >> amazonq-output.md
              else
                echo "⚠️ Q review output not generated" >> amazonq-output.md
              fi
            else
              echo "⚠️ Amazon Q Developer CLI not available" >> amazonq-output.md
              echo "" >> amazonq-output.md
              echo "## Setup Instructions" >> amazonq-output.md
              echo "1. Install AWS Q Developer CLI: https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line.html" >> amazonq-output.md
              echo "2. Configure AWS credentials with Q Developer access" >> amazonq-output.md
              echo "3. Run 'q review' in your repository" >> amazonq-output.md
            fi
          else
            echo "⚠️ AWS CLI not available. Cannot use Amazon Q Developer." >> amazonq-output.md
            echo "" >> amazonq-output.md
            echo "## Alternative: Manual Review Checklist" >> amazonq-output.md
            echo "- Review IAM policies for least privilege" >> amazonq-output.md
            echo "- Check for hardcoded credentials" >> amazonq-output.md
            echo "- Validate security group rules" >> amazonq-output.md
            echo "- Ensure encryption at rest and in transit" >> amazonq-output.md
          fi

      - name: G4F (GPT4Free) Analysis
        id: g4f
        run: |
          echo "# G4F Analysis" > g4f-output.md
          
          # Create Python script for analysis
          python3 << 'EOF_PYTHON' >> g4f-output.md 2>&1 || echo "⚠️ G4F analysis encountered issues" >> g4f-output.md
          import g4f
          import glob
          try:
              files_content = ""
              patterns = ["pulumi/**/*.ts", ".github/workflows/*.yml", "package.json"]
              for pattern in patterns:
                  for filepath in glob.glob(pattern, recursive=True):
                      try:
                          with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                              content = f.read()[:1000]
                              files_content += f"\n\n=== {filepath} ===\n{content}"
                      except Exception as e:
                          print(f"Error reading {filepath}: {e}")
              
              prompt = f"""Review this homelab infrastructure repository for:
          1. Security vulnerabilities and hardcoded secrets
          2. CI/CD pipeline improvements
          3. Infrastructure as Code best practices
          4. Node.js and TypeScript code quality
          
          Repository files:
          {files_content[:8000]}
          
          Provide specific, actionable recommendations."""
              
              providers = [g4f.Provider.Bing, g4f.Provider.You, g4f.Provider.Phind]
              for provider in providers:
                  try:
                      response = g4f.ChatCompletion.create(
                          model="gpt-3.5-turbo",
                          messages=[{"role": "user", "content": prompt}],
                          provider=provider,
                          timeout=60
                      )
                      print(response)
                      exit(0)
                  except Exception as e:
                      print(f"Provider {provider.__name__} failed: {e}")
                      continue
              
              print("⚠️ All G4F providers failed. Using fallback analysis.")
              print("")
              print("## Static Analysis Results:")
              print("- ✓ GitHub Actions workflows using official actions")
              print("- ✓ Node.js project with TypeScript configuration")
              print("- ⚠️ Review secrets management in workflows")
              print("- ⚠️ Consider adding caching for dependencies")
              print("- ⚠️ Add workflow status badges to README")
          except Exception as e:
              print(f"⚠️ G4F analysis error: {e}")
              print("")
              print("## Fallback Recommendations:")
              print("- Implement proper secret rotation")
              print("- Add comprehensive testing in CI")
              print("- Use dependency caching for faster builds")
              print("- Consider using Dependabot for updates")
          EOF_PYTHON

      - name: Synthesize Combined Report
        id: synth
        run: |
          echo "# 🤖 AI Code Analysis Report" > REPORT.md
          echo "" >> REPORT.md
          echo "**Generated:** $(date)" >> REPORT.md
          echo "**Repository:** edcet/homelab-deploy" >> REPORT.md
          echo "**Branch:** ${{ github.ref_name }}" >> REPORT.md
          echo "**Commit:** ${{ github.sha }}" >> REPORT.md
          echo "" >> REPORT.md
          echo "---" >> REPORT.md
          echo "" >> REPORT.md
          
          if [ -f perplexity-output.md ]; then
            cat perplexity-output.md >> REPORT.md
          else
            echo "# Perplexity Analysis" >> REPORT.md
            echo "⚠️ No output generated" >> REPORT.md
          fi
          
          echo "" >> REPORT.md
          echo "---" >> REPORT.md
          echo "" >> REPORT.md
          
          if [ -f amazonq-output.md ]; then
            cat amazonq-output.md >> REPORT.md
          else
            echo "# Amazon Q Developer Analysis" >> REPORT.md
            echo "⚠️ No output generated" >> REPORT.md
          fi
          
          echo "" >> REPORT.md
          echo "---" >> REPORT.md
          echo "" >> REPORT.md
          
          if [ -f g4f-output.md ]; then
            cat g4f-output.md >> REPORT.md
          else
            echo "# G4F Analysis" >> REPORT.md
            echo "⚠️ No output generated" >> REPORT.md
          fi
          
          echo "" >> REPORT.md
          echo "---" >> REPORT.md
          echo "" >> REPORT.md
          echo "## Summary" >> REPORT.md
          echo "This report combines analysis from:" >> REPORT.md
          echo "- Perplexity AI (online model with real-time knowledge)" >> REPORT.md
          echo "- Amazon Q Developer (AWS-integrated code review)" >> REPORT.md
          echo "- G4F/GPT4Free (open-source alternative)" >> REPORT.md
          echo "" >> REPORT.md
          echo "Review each section for actionable recommendations." >> REPORT.md

      - name: Upload Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ai-analysis-report-${{ github.run_number }}
          path: |
            REPORT.md
            perplexity-output.md
            amazonq-output.md
            g4f-output.md
            q-review.json
          retention-days: 30

      - name: Create or Update PR with Fixes
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(ai): apply AI analysis recommendations"
          title: "🤖 AI Analysis Improvements - Run #${{ github.run_number }}"
          body: |
            # Automated AI Code Analysis Results
            
            This PR contains recommendations from multiple AI code analysis tools:
            
            - ✅ **Perplexity AI**: Online model with real-time knowledge
            - ✅ **Amazon Q Developer**: AWS-integrated security and best practices
            - ✅ **G4F/GPT4Free**: Open-source LLM analysis
            
            ## 📊 Report
            
            The complete analysis report has been attached as a workflow artifact.
            
            **Download the report**: [ai-analysis-report-${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ## 🔍 Key Findings
            
            Review the attached `REPORT.md` for detailed recommendations on:
            - Security vulnerabilities
            - CI/CD pipeline improvements
            - Infrastructure best practices
            - Code quality enhancements
            
            ## 📝 Next Steps
            
            1. Review the analysis report
            2. Implement recommended changes
            3. Update secrets and configurations as needed
            4. Re-run workflow to verify improvements
            
            ---
            
            *Generated automatically by AI Code Analysis workflow*
            *Run ID: ${{ github.run_id }}*
            *Commit: ${{ github.sha }}*
          branch: chore/ai-analysis-improvements-${{ github.run_number }}
          base: main
          delete-branch: true
